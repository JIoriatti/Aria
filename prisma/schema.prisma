generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  favorites     Favorite[]
  history       History[]
  recentArtists RecentArtist[]

  // recentArtistsIDs  String[] @db.ObjectId
  // recentArtists Artist[]  @relation(fields: [recentArtistsIDs], references: [id])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  gender String
  age    String

  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
}

model Favorite {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  spotifyId    String
  songName     String
  artistsNames String[]
  image        String
  miniImage    String?
  previewMp3   String

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade)
}

model History {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  spotifyId    String
  songName     String
  artistsNames String[]
  image        String
  miniImage    String?
  previewMp3   String

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade)
}

model RecentArtist {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  spotifyId     String
  name          String
  image         String
  miniImage     String

  userId        String  @db.ObjectId
  user          User    @relation(fields: [userId], references: [id])

  @@map("recentArtist")
}










//Models to add later to store full Spotify API responses.

// model Artist {
//   id           String      @id @default(auto()) @map("_id") @db.ObjectId
//   albumIDs     String[]    @db.ObjectId
//   albums       Album[]
//   spotifyId    String
//   artistInfoID String      @db.ObjectId
//   artistInfo   ArtistInfo?

//   userIDs      String[] @db.ObjectId
//   user         User[]   @relation(fields: [userIDs], references: [id])
// }

// model ArtistInfo {
//   id            String        @id @default(auto()) @map("_id") @db.ObjectId
//   external_urls ExternalURLS?
//   followers     Followers?
//   genres        String[]
//   href          String
//   spotifyId     String
//   imageIDs      String[]      @db.ObjectId
//   images        Image[]
//   name          String
//   popularity    Int?
//   type          String?
//   uri           String?

//   artistId String @unique @db.ObjectId
//   artist   Artist @relation(fields: [artistId], references: [id])
// }

// model SubArtist {
//   id            String        @id @default(auto()) @map("_id") @db.ObjectId
//   external_urls ExternalURLS?
//   href          String
//   spotifyId     String
//   name          String
//   type          String?
//   uri           String?

//   albumIDs String[] @db.ObjectId
//   albums   Album[]  @relation(fields: [albumIDs], references: [id])

//   trackIDs String[] @db.ObjectId
//   tracks   Track[]  @relation(fields: [trackIDs], references: [id])
// }

// model Album {
//   id                     String        @id @default(auto()) @map("_id") @db.ObjectId
//   album_group            String
//   album_type             String
//   available_markets      String[]
//   external_urls          ExternalURLS?
//   href                   String
//   spotifyId              String
//   imageIDs               String[]      @db.ObjectId
//   images                 Image[]
//   name                   String
//   release_date           String?
//   release_date_precision String?
//   total_tracks           Int
//   trackIDs               String[]      @db.ObjectId
//   tracks                 Track[]
//   type                   String?
//   uri                    String?

//   artistIDs String[]    @db.ObjectId
//   artists   SubArtist[] @relation(fields: [artistIDs], references: [id])

//   artistId String @db.ObjectId
//   artist   Artist @relation(fields: [artistId], references: [id], onUpdate: Cascade)
// }

// model Track {
//   id                String        @id @default(auto()) @map("_id") @db.ObjectId
//   artistsIDs        String[]      @db.ObjectId
//   artists           SubArtist[]   @relation(fields: [artistsIDs], references: [id])
//   available_markets String[]
//   disc_number       Int?
//   duration_ms       Int
//   explicit          Boolean?
//   external_urls     ExternalURLS?
//   href              String
//   spotifyId         String
//   is_local          Boolean?
//   name              String
//   preview_url       String
//   track_number      String?
//   type              String?
//   uri               String?

//   albumId String @db.ObjectId
//   album   Album  @relation(fields: [albumId], references: [id])
// }

// model Image {
//   id     String @id @default(auto()) @map("_id") @db.ObjectId
//   height Int
//   url    String
//   width  Int

//   artistInfoId String     @db.ObjectId
//   artistInfo   ArtistInfo @relation(fields: [artistInfoId], references: [id])

//   albumId String @db.ObjectId
//   album   Album  @relation(fields: [albumId], references: [id], onUpdate: Cascade)
// }

// model ExternalURLS {
//   id      String @id @default(auto()) @map("_id") @db.ObjectId
//   spotify String

//   trackId String @unique @db.ObjectId
//   track   Track  @relation(fields: [trackId], references: [id], onDelete: NoAction, onUpdate: NoAction)

//   albumId String @unique @db.ObjectId
//   album   Album? @relation(fields: [albumId], references: [id])

//   subArtistId String     @unique @db.ObjectId
//   subArtist   SubArtist? @relation(fields: [subArtistId], references: [id])

//   artistInfoId String      @unique @db.ObjectId
//   artistInfo   ArtistInfo? @relation(fields: [artistInfoId], references: [id])
// }

// model Followers {
//   id    String  @id @default(auto()) @map("_id") @db.ObjectId
//   href  String?
//   total Int?

//   artistInfoId String      @unique @db.ObjectId
//   artistInfo   ArtistInfo? @relation(fields: [artistInfoId], references: [id])
// }
